import { Bot } from 'grammy';
import { CFG } from './config.js';
import { LOG } from './logger.js';
import { getLivePair } from './db.js';
import { findArbCandidates } from './scan.js';
import { forecastCrossAfterLock } from './forecaster.js';
import { getForecast } from './db.js';



let bot = null;

export function notify(text) {
  if (!bot || !CFG.TG_CHAT_ID) return;
  bot.api.sendMessage(CFG.TG_CHAT_ID, text).catch(e => LOG.error('TG send fail', { msg: e.message }));
}

export function startTelegram() {
  if (!CFG.TG_BOT_TOKEN) { LOG.warn('Telegram disabled ‚Äî TG_BOT_TOKEN empty'); return; }
  bot = new Bot(CFG.TG_BOT_TOKEN);

  bot.command('start', (ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞–∑—ã–≤–∞—é –∞—Ä–±–∏—Ç—Ä–∞–∂ LIS <-> CS.MONEY, —Å–¥–µ–ª–∫–∏ ‚Äî –≤—Ä—É—á–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É–π /scan, /pair <name>, /forecast <name>'));

  bot.command('scan', async (ctx) => {
    const arr = findArbCandidates({});
    if (!arr.length) return ctx.reply('–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    const lines = arr.map((x,i)=> {
      const e=(x.best_edge*100).toFixed(2)+'%';
      const lp = Number.isFinite(x.lis)?('$'+x.lis.toFixed(2)):'‚Äî';
      const cp = Number.isFinite(x.csm)?('$'+x.csm.toFixed(2)):'‚Äî';
      const lk = x.lis_locked?'üîí':'üîì'; const ck = x.csm_locked?'üîí':'üîì';
      return `${i+1}. ${x.name}\n   LIS ${lk}: ${lp} | CSM ${ck}: ${cp}\n   Best edge: ${e} (${x.direction})`;
    });
    ctx.reply(`üîé –¢–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:\n\n${lines.join('\n\n')}`);
  });

  bot.command('pair', async (ctx) => {
    const name = (ctx.match || '').trim();
    if (!name) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pair <—Ç–æ—á–Ω–æ–µ –∏–º—è>');
    const pair = getLivePair(name);
    if (!pair || !pair.markets?.length) return ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç—Ç–æ–º —Å–∫–∏–Ω–µ.');
    const rows = pair.markets.map(m => {
      const k = m.market==='lis'?'LIS':'CSM';
      const lock = m.locked?'üîí':'üîì';
      const p = Number.isFinite(m.price)?('$'+Number(m.price).toFixed(2)):'‚Äî';
      return `${k} ${lock}: ${p} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${m.updated_at})`;
    });
    ctx.reply(`üìä ${pair.name}\n`+rows.join('\n'));
  });

  bot.command('forecast', async (ctx) => {
    const name = (ctx.match || '').trim();
    if (!name) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /forecast <—Ç–æ—á–Ω–æ–µ –∏–º—è>');
    const fOld = getForecast(name);
    const f = await forecastCrossAfterLock(name);
    const pct = (Number(f.expected_profit_pct||0)*100).toFixed(2)+'%';
    ctx.reply(
`üß† –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ ${name} (–ø–æ—Å–ª–µ —Ç—Ä–µ–π–¥–ª–æ–∫–∞ ~${CFG.TRADE_HOLD_DAYS}–¥):
–ö—É–ø–∏—Ç—å: ${f.buy_market?.toUpperCase()}
–ü—Ä–æ–¥–∞—Ç—å: ${f.sell_market?.toUpperCase()}
–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${pct}
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(Number(f.confidence||0)*100).toFixed(0)}%
${f.expected_sell_price ? '–û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: $'+Number(f.expected_sell_price).toFixed(2):''}
${f.notes ? '–ó–∞–º–µ—Ç–∫–∏: '+f.notes : ''}`
    );
  });

  bot.start().then(() => LOG.info('Telegram bot started'));
}

export function stopTelegram() {
  try { if (bot) bot.stop(); } catch {}
  bot = null;
}
